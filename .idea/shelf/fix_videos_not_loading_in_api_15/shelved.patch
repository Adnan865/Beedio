Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"NullableNotNullManager\">\n    <option name=\"myDefaultNullable\" value=\"android.support.annotation.Nullable\" />\n    <option name=\"myDefaultNotNull\" value=\"android.support.annotation.NonNull\" />\n    <option name=\"myNullables\">\n      <value>\n        <list size=\"4\">\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\n        </list>\n      </value>\n    </option>\n    <option name=\"myNotNulls\">\n      <value>\n        <list size=\"4\">\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\n        </list>\n      </value>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1524985404000)
+++ .idea/misc.xml	(date 1525070077000)
@@ -24,7 +24,7 @@
       </value>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?><!--\n  ~     LM videodownloader is a browser app for android, made to easily\n  ~     download videos.\n  ~     Copyright (C) 2018 Loremar Marabillas\n  ~\n  ~     This program is free software; you can redistribute it and/or modify\n  ~     it under the terms of the GNU General Public License as published by\n  ~     the Free Software Foundation; either version 2 of the License, or\n  ~     (at your option) any later version.\n  ~\n  ~     This program is distributed in the hope that it will be useful,\n  ~     but WITHOUT ANY WARRANTY; without even the implied warranty of\n  ~     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  ~     GNU General Public License for more details.\n  ~\n  ~     You should have received a copy of the GNU General Public License along\n  ~     with this program; if not, write to the Free Software Foundation, Inc.,\n  ~     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n  -->\n\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"marabillas.loremar.lmvideodownloader\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity\n            android:name=\".LMvdActivity\"\n            android:windowSoftInputMode=\"stateHidden\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n            <intent-filter>\n                <action android:name=\"android.intent.action.VIEW\" />\n\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n\n                <data\n                    android:scheme=\"https\"\n                    android:host=\"gogoanime.se\" />\n            </intent-filter>\n        </activity>\n\n        <service\n            android:name=\".download_feature.DownloadManager\"\n            android:exported=\"false\" />\n\n        <provider\n            android:authorities=\"marabillas.loremar.lmvideodownloader.fileprovider\"\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/paths\" />\n        </provider>\n    </application>\n\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(date 1524985404000)
+++ app/src/main/AndroidManifest.xml	(date 1524986196000)
@@ -30,7 +30,8 @@
         android:label="@string/app_name"
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
-        android:theme="@style/AppTheme">
+        android:theme="@style/AppTheme"
+        android:hardwareAccelerated="true">
         <activity
             android:name=".LMvdActivity"
             android:windowSoftInputMode="stateHidden">
Index: app/src/main/java/marabillas/loremar/lmvideodownloader/BrowserWindow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *     LM videodownloader is a browser app for android, made to easily\n *     download videos.\n *     Copyright (C) 2018 Loremar Marabillas\n *\n *     This program is free software; you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation; either version 2 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License along\n *     with this program; if not, write to the Free Software Foundation, Inc.,\n *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage marabillas.loremar.lmvideodownloader;\n\nimport android.annotation.SuppressLint;\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.graphics.Typeface;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.widget.RecyclerView;\nimport android.text.SpannableStringBuilder;\nimport android.text.Spanned;\nimport android.text.style.ForegroundColorSpan;\nimport android.text.style.StyleSpan;\nimport android.util.Log;\nimport android.view.GestureDetector;\nimport android.view.Gravity;\nimport android.view.KeyEvent;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.PopupMenu;\nimport android.widget.PopupWindow;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\n\nimport org.jetbrains.annotations.Nullable;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLSocketFactory;\n\npublic class BrowserWindow extends LMvdFragment implements View.OnTouchListener, View\n        .OnClickListener, LMvdActivity.OnBackPressedListener, View.OnLongClickListener {\n    private static final String TAG = \"loremarTest\";\n    private String url;\n    private View view;\n    private TouchableWebView page;\n    private SSLSocketFactory defaultSSLSF;\n\n    private View videosFoundHUD;\n    private float prevX, prevY;\n    private ProgressBar findingVideoInProgress;\n    private int numLinksInspected;\n    private TextView videosFoundText;\n    private boolean moved = false;\n    private GestureDetector gesture;\n\n    private View foundVideosWindow;\n    private VideoList videoList;\n    private TextView foundVideosQueue;\n    private TextView foundVideosDelete;\n    private TextView foundVideosClose;\n\n    private TextView numWindows;\n\n    private ProgressBar loadingPageProgress;\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        if (v == videosFoundHUD) {\n            gesture.onTouchEvent(event);\n\n            switch (event.getAction()) {\n                case MotionEvent.ACTION_UP:\n                    if (!moved) v.performClick();\n                    moved = false;\n                    break;\n                case MotionEvent.ACTION_DOWN:\n                    prevX = event.getRawX();\n                    prevY = event.getRawY();\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    moved = true;\n                    float moveX = event.getRawX() - prevX;\n                    videosFoundHUD.setX(videosFoundHUD.getX() + moveX);\n                    prevX = event.getRawX();\n                    float moveY = event.getRawY() - prevY;\n                    videosFoundHUD.setY(videosFoundHUD.getY() + moveY);\n                    prevY = event.getRawY();\n                    float width = getResources().getDisplayMetrics().widthPixels;\n                    float height = getResources().getDisplayMetrics().heightPixels;\n                    if ((videosFoundHUD.getX() + videosFoundHUD.getWidth()) >= width\n                            || videosFoundHUD.getX() <= 0) {\n                        videosFoundHUD.setX(videosFoundHUD.getX() - moveX);\n                    }\n                    if ((videosFoundHUD.getY() + videosFoundHUD.getHeight()) >= height\n                            || videosFoundHUD.getY() <= 0) {\n                        videosFoundHUD.setY(videosFoundHUD.getY() - moveY);\n                    }\n                    break;\n            }\n        }\n        return true;\n    }\n\n    @Override\n    public void onClick(View v) {\n        if (v == videosFoundHUD) {\n            foundVideosWindow.setVisibility(View.VISIBLE);\n        } else if (v == foundVideosQueue) {\n            videoList.saveCheckedItemsForDownloading();\n            videoList.deleteCheckedItems();\n            updateFoundVideosBar();\n        } else if (v == foundVideosDelete) {\n            videoList.deleteCheckedItems();\n            updateFoundVideosBar();\n        } else if (v == foundVideosClose) {\n            foundVideosWindow.setVisibility(View.GONE);\n        }\n    }\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Bundle data = getArguments();\n        url = data.getString(\"url\");\n        defaultSSLSF = HttpsURLConnection.getDefaultSSLSocketFactory();\n    }\n\n    private void createTopBar() {\n        final DrawerLayout layout = getActivity().findViewById(R.id.drawer);\n        ImageView menu = view.findViewById(R.id.menuButton);\n        menu.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                layout.openDrawer(Gravity.START);\n            }\n        });\n\n        TextView close = view.findViewById(R.id.closeWindow);\n        close.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                new AlertDialog.Builder(getActivity())\n                        .setMessage(\"Are you sure you want to close this window?\")\n                        .setPositiveButton(\"YES\", new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialog, int which) {\n                                getLMvdActivity().getBrowserManager().closeWindow(BrowserWindow.this);\n                            }\n                        })\n                        .setNegativeButton(\"NO\", new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialog, int which) {\n\n                            }\n                        })\n                        .create()\n                        .show();\n            }\n        });\n    }\n\n    private void createNavigationBar() {\n        TextView prev = view.findViewById(R.id.prevButton);\n        prev.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                WebView page = BrowserWindow.this.page;\n                if (page.canGoBack()) page.goBack();\n            }\n        });\n        TextView next = view.findViewById(R.id.nextButton);\n        next.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                WebView page = BrowserWindow.this.page;\n                if (page.canGoForward()) page.goForward();\n            }\n        });\n\n        TextView reload = view.findViewById(R.id.reload);\n        reload.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                page.loadUrl(page.getUrl());\n            }\n        });\n\n        numWindows = view.findViewById(R.id.numWindows);\n        numWindows.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                PopupWindow popupWindow = new PopupWindow(getActivity());\n                popupWindow.setContentView(getLMvdActivity().getBrowserManager().getAllWindows());\n                popupWindow.setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);\n                popupWindow.setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);\n                popupWindow.setFocusable(true);\n                popupWindow.setBackgroundDrawable(new ColorDrawable(Color.GRAY));\n\n                popupWindow.showAtLocation(numWindows, Gravity.BOTTOM | Gravity.END, 0,\n                        view.findViewById(R.id.navigationBar).getHeight());\n            }\n        });\n\n        TextView newWindow = view.findViewById(R.id.plusWindow);\n        newWindow.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                final AlertDialog dialog = new AlertDialog.Builder(getActivity()).create();\n                dialog.setMessage(getResources().getString(R.string.enter_web));\n                final EditText text = new EditText(getActivity());\n                text.setSingleLine(true);\n                text.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams\n                        .WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n                text.setHint(\"type here\");\n                text.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n                    @Override\n                    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n                        Utils.hideSoftKeyboard(getActivity(), text.getWindowToken());\n                        dialog.cancel();\n                        new WebConnect(text, getLMvdActivity()).connect();\n                        return false;\n                    }\n                });\n                dialog.setView(text);\n                dialog.setButton(DialogInterface.BUTTON_POSITIVE, \"OK\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        Utils.hideSoftKeyboard(getActivity(), text.getWindowToken());\n                        new WebConnect(text, getLMvdActivity()).connect();\n                    }\n                });\n                dialog.setButton(DialogInterface.BUTTON_NEGATIVE, \"CANCEL\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        Utils.hideSoftKeyboard(getActivity(), text.getWindowToken());\n                    }\n                });\n                dialog.show();\n            }\n        });\n    }\n\n    private void createVideosFoundHUD() {\n        videosFoundHUD = view.findViewById(R.id.videosFoundHUD);\n        videosFoundHUD.setOnTouchListener(this);\n        videosFoundHUD.setOnClickListener(this);\n        gesture = new GestureDetector(getActivity(), new GestureDetector.SimpleOnGestureListener() {\n            @Override\n            public boolean onSingleTapUp(MotionEvent e) {\n                videosFoundHUD.performClick();\n                return true;\n            }\n        });\n\n        findingVideoInProgress = videosFoundHUD.findViewById(R.id.findingVideosInProgress);\n        findingVideoInProgress.setVisibility(View.GONE);\n\n        videosFoundText = videosFoundHUD.findViewById(R.id.videosFoundText);\n    }\n\n    private void createFoundVideosWindow() {\n        foundVideosWindow = view.findViewById(R.id.foundVideosWindow);\n        videoList = new VideoList(getActivity(), (RecyclerView) foundVideosWindow.findViewById(R\n                .id.videoList)) {\n            @Override\n            void onItemDeleted() {\n                updateFoundVideosBar();\n            }\n        };\n\n        foundVideosWindow.setVisibility(View.GONE);\n\n        foundVideosQueue = foundVideosWindow.findViewById(R.id.foundVideosQueue);\n        foundVideosDelete = foundVideosWindow.findViewById(R.id.foundVideosDelete);\n        foundVideosClose = foundVideosWindow.findViewById(R.id.foundVideosClose);\n        foundVideosQueue.setOnClickListener(this);\n        foundVideosDelete.setOnClickListener(this);\n        foundVideosClose.setOnClickListener(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle\n            savedInstanceState) {\n        view = inflater.inflate(R.layout.browser, container, false);\n        page = view.findViewById(R.id.page);\n        loadingPageProgress = view.findViewById(R.id.loadingPageProgress);\n        loadingPageProgress.setVisibility(View.GONE);\n\n        createTopBar();\n\n        createNavigationBar();\n\n        createVideosFoundHUD();\n\n        createFoundVideosWindow();\n\n        updateFoundVideosBar();\n\n        return view;\n    }\n\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    @Override\n    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n        numLinksInspected = 0;\n        WebSettings webSettings = page.getSettings();\n        webSettings.setJavaScriptEnabled(true);\n        page.setWebViewClient(new WebViewClient() {//it seems not setting webclient, launches\n            //default browser instead of opening the page in webview\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                return super.shouldOverrideUrlLoading(view, request);\n            }\n\n            @Override\n            public void onPageStarted(final WebView view, final String url, Bitmap favicon) {\n                new Handler(Looper.getMainLooper()).post(new Runnable() {\n                    @Override\n                    public void run() {\n                        TextView urlBox = BrowserWindow.this.view.findViewById(R.id.urlBox);\n                        urlBox.setText(url);\n                    }\n                });\n\n                loadingPageProgress.setVisibility(View.VISIBLE);\n\n                super.onPageStarted(view, url, favicon);\n            }\n\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n\n                loadingPageProgress.setVisibility(View.GONE);\n            }\n\n            @Override\n            public void onLoadResource(final WebView view, final String url) {\n                //Log.i(\"loremarTest\", getClass().getEnclosingMethod().getName()+ \"=url:\" + url);\n                final String page = view.getUrl();\n                final String title = view.getTitle();\n                new Thread() {\n                    @Override\n                    public void run() {\n                        String urlLowerCase = url.toLowerCase();\n                        if (urlLowerCase.contains(\"mp4\") || urlLowerCase.contains(\"video\") ||\n                                urlLowerCase.contains(\"embed\")) {\n                            numLinksInspected++;\n                            new Handler(Looper.getMainLooper()).post(new Runnable() {\n                                @Override\n                                public void run() {\n                                    if (findingVideoInProgress.getVisibility() == View.GONE) {\n                                        findingVideoInProgress.setVisibility(View.VISIBLE);\n                                    }\n                                }\n                            });\n\n                            Utils.disableSSLCertificateChecking();\n                            Log.i(TAG, \"retreiving headers from \" + url);\n\n                            URLConnection uCon = null;\n                            try {\n                                uCon = new URL(url).openConnection();\n                                uCon.connect();\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                            if (uCon != null) {\n                                String contentType = uCon.getHeaderField(\"content-type\");\n\n                                if (contentType != null) {\n\n                                    //todo if url points to an html document, parse for video content\n\n                                    contentType = contentType.toLowerCase();\n                                    if (contentType.contains(\"video/mp4\")) {\n                                        String size = uCon.getHeaderField(\"content-length\");\n                                        String link = uCon.getHeaderField(\"Location\");\n                                        if (link == null) {\n                                            link = uCon.getURL().toString();\n                                        }\n                                        String name = \"video\";\n                                        if (title != null) {\n                                            name = title;\n                                        }\n                                        String type = \"mp4\";\n                                        videoList.addItem(size, type, link, name, page);\n\n                                        updateFoundVideosBar();\n                                        String videoFound = \"name:\" + name + \"\\n\" +\n                                                \"link:\" + link + \"\\n\" +\n                                                \"type:\" + type + \"\\n\" +\n                                                \"size\" + size;\n                                        Log.i(TAG, videoFound);\n                                    } else Log.i(TAG, \"Not a video. Content type = \" +\n                                            contentType);\n                                } else {\n                                    Log.i(TAG, \"no content type\");\n                                }\n                            } else Log.i(TAG, \"no connection\");\n\n                            //restore default sslsocketfactory\n                            HttpsURLConnection.setDefaultSSLSocketFactory(defaultSSLSF);\n                            numLinksInspected--;\n                            if (numLinksInspected <= 0) {\n                                new Handler(Looper.getMainLooper()).post(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        findingVideoInProgress.setVisibility(View.GONE);\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }.start();\n            }\n        });\n        page.setWebChromeClient(new WebChromeClient() {\n            @Override\n            public void onProgressChanged(WebView view, int newProgress) {\n                loadingPageProgress.setProgress(newProgress);\n            }\n        });\n        page.setOnLongClickListener(this);\n        page.loadUrl(url);\n    }\n\n    private void updateFoundVideosBar() {\n        final String videosFoundString = \"Videos: \" + videoList.getSize() + \" found\";\n        final SpannableStringBuilder sb = new SpannableStringBuilder(videosFoundString);\n        final ForegroundColorSpan fcs = new ForegroundColorSpan(Color.rgb(0, 0, 255));\n        final StyleSpan bss = new StyleSpan(Typeface.BOLD);\n        sb.setSpan(fcs, 8, 10 + videoList.getSize() / 10, Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n        sb.setSpan(bss, 8, 10 + videoList.getSize() / 10, Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n        new Handler(Looper.getMainLooper()).post(new Runnable() {\n            @Override\n            public void run() {\n                videosFoundText.setText(sb);\n            }\n        });\n    }\n\n    @Override\n    public void onBackpressed() {\n        if (foundVideosWindow.getVisibility() == View.VISIBLE) {\n            foundVideosWindow.setVisibility(View.GONE);\n        } else if (page.canGoBack()) {\n            page.goBack();\n        } else {\n            new AlertDialog.Builder(getActivity())\n                    .setMessage(\"Are you sure you want to close this window?\")\n                    .setPositiveButton(\"YES\", new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialog, int which) {\n                            getLMvdActivity().getBrowserManager().closeWindow(BrowserWindow.this);\n                        }\n                    })\n                    .setNegativeButton(\"NO\", new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialog, int which) {\n\n                        }\n                    })\n                    .create()\n                    .show();\n        }\n    }\n\n    @Override\n    public boolean onLongClick(View v) {\n        final WebView.HitTestResult hit = page.getHitTestResult();\n        if (hit.getType() == WebView.HitTestResult.SRC_ANCHOR_TYPE) {\n            if (hit.getExtra() != null) {\n                View point = new View(getActivity());\n                point.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams\n                        .WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));\n                if (view != null) {\n                    ((ViewGroup) view).addView(point);\n                }\n                point.getLayoutParams().height = 10;\n                point.getLayoutParams().width = 10;\n                point.setX(page.getClickX());\n                point.setY(page.getClickY());\n                PopupMenu menu = new PopupMenu(getActivity(), point);\n                menu.getMenu().add(\"Open in new window\");\n                menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n                    @Override\n                    public boolean onMenuItemClick(MenuItem item) {\n                        getLMvdActivity().getBrowserManager().newWindow(hit.getExtra());\n                        return true;\n                    }\n                });\n                menu.show();\n            }\n        }\n        return true;\n    }\n\n    public void updateNumWindows(int num) {\n        final String numWindowsString = \"Windows(\" + num + \")\";\n        final SpannableStringBuilder sb = new SpannableStringBuilder(numWindowsString);\n        final ForegroundColorSpan fcs = new ForegroundColorSpan(Color.rgb(0, 0, 255));\n        final StyleSpan bss = new StyleSpan(Typeface.BOLD);\n        sb.setSpan(fcs, 8, 10 + num / 10, Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n        sb.setSpan(bss, 8, 10 + num / 10, Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n        new Handler(Looper.getMainLooper()).post(new Runnable() {\n            @Override\n            public void run() {\n                numWindows.setText(sb);\n            }\n        });\n    }\n\n    public WebView getWebView() {\n        return page;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/marabillas/loremar/lmvideodownloader/BrowserWindow.java	(date 1524985404000)
+++ app/src/main/java/marabillas/loremar/lmvideodownloader/BrowserWindow.java	(date 1524999238000)
@@ -21,12 +21,14 @@
 package marabillas.loremar.lmvideodownloader;
 
 import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.Typeface;
 import android.graphics.drawable.ColorDrawable;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
@@ -334,8 +336,28 @@
         numLinksInspected = 0;
         WebSettings webSettings = page.getSettings();
         webSettings.setJavaScriptEnabled(true);
+        webSettings.setDomStorageEnabled(true);
+        webSettings.setAllowFileAccess(true);
+        /*webSettings.setAllowContentAccess(true);
+        webSettings.setAppCacheEnabled(true);
+        webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
+        webSettings.setLoadsImagesAutomatically(true);
+        webSettings.setBlockNetworkLoads(false);
+        webSettings.setBlockNetworkImage(false);*/
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) {
+            webSettings.setPluginState(WebSettings.PluginState.ON);
+        }
+
         page.setWebViewClient(new WebViewClient() {//it seems not setting webclient, launches
             //default browser instead of opening the page in webview
+
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                view.loadUrl(url);
+                return true;
+            }
+
+            @TargetApi(Build.VERSION_CODES.N)
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                 return super.shouldOverrideUrlLoading(view, request);
@@ -399,7 +421,8 @@
 
                                 if (contentType != null) {
 
-                                    //todo if url points to an html document, parse for video content
+                                    //todo if url points to an html document or json, parse for
+                                    // video content
 
                                     contentType = contentType.toLowerCase();
                                     if (contentType.contains("video/mp4")) {
