Index: app/src/main/java/marabillas/loremar/lmvideodownloader/download_feature/DownloadManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *     LM videodownloader is a browser app for android, made to easily\n *     download videos.\n *     Copyright (C) 2018 Loremar Marabillas\n *\n *     This program is free software; you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation; either version 2 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License along\n *     with this program; if not, write to the Free Software Foundation, Inc.,\n *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage marabillas.loremar.lmvideodownloader.download_feature;\n\nimport android.app.IntentService;\nimport android.content.Intent;\nimport android.os.Environment;\nimport android.support.annotation.Nullable;\nimport android.util.Log;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.nio.channels.Channels;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.ReadableByteChannel;\n\npublic class DownloadManager extends IntentService {\n    private static File downloadFile = null;\n    private static long prevDownloaded = 0;\n    private static long downloadSpeed = 0;\n    private static long totalSize = 0;\n\n    public DownloadManager() {\n        super(\"DownloadManager\");\n    }\n\n    @Override\n    protected void onHandleIntent(@Nullable Intent intent) {\n        prevDownloaded = 0;\n        URLConnection connection;\n        try {\n            if (intent != null) {\n                totalSize = Long.parseLong(intent.getStringExtra(\"size\"));\n                connection = (new URL(intent.getStringExtra(\"link\"))).openConnection();\n                String filename = intent.getStringExtra(\"name\") + \".\" + intent.getStringExtra(\"type\");\n                File directory = new File(Environment.getExternalStorageDirectory()\n                        .getAbsolutePath(), \"Download\");\n\n                boolean directotryExists;\n                directotryExists = directory.exists() || directory.mkdir() || directory\n                        .createNewFile();\n                if (directotryExists) {\n                    downloadFile = new File(Environment.getExternalStoragePublicDirectory(Environment\n                            .DIRECTORY_DOWNLOADS), filename);\n                    if (connection != null) {\n                        FileOutputStream out = null;\n                        if (downloadFile.exists()) {\n                            prevDownloaded = downloadFile.length();\n                            connection.setRequestProperty(\"Range\", \"bytes=\" + downloadFile.length\n                                    () + \"-\");\n                            connection.connect();\n                            out = new FileOutputStream(downloadFile.getAbsolutePath(), true);\n                        } else {\n                            connection.connect();\n                            if (downloadFile.createNewFile()) {\n                                out = new FileOutputStream(downloadFile.getAbsolutePath(), true);\n                            }\n                        }\n                        if (out != null && downloadFile.exists()) {\n                            InputStream in = connection.getInputStream();\n                            ReadableByteChannel readableByteChannel = Channels.newChannel(in);\n                            FileChannel fileChannel = out.getChannel();\n                            while (downloadFile.length() < totalSize) {\n                                if (Thread.currentThread().isInterrupted()) return;\n                                fileChannel.transferFrom(readableByteChannel, 0, 1024);\n                                /*ByteBuffer buffer = ByteBuffer.allocateDirect(1024);\n                                int read = readableByteChannel.read(buffer);\n                                if (read!=-1) {\n                                    buffer.flip();\n                                    writableByteChannel.write(buffer);\n                                }\n                                else break;*/\n                                if (downloadFile == null) return;\n                            }\n                            readableByteChannel.close();\n                            in.close();\n                            out.flush();\n                            out.close();\n                            fileChannel.close();\n                            //writableByteChannel.close();\n                            onDownloadFinishedListener.onDownloadFinished();\n                        }\n                    }\n                } else {\n                    Log.e(\"loremarTest\", \"directory doesn't exist\");\n                }\n            }\n        } catch (FileNotFoundException e) {\n            Log.i(\"loremarTest\", \"link:\" + intent.getStringExtra(\"link\") + \" not found\");\n            onLinkNotFoundListener.onLinkNotFound();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    interface OnDownloadFinishedListener {\n        void onDownloadFinished();\n    }\n\n    private static OnDownloadFinishedListener onDownloadFinishedListener;\n\n    static void setOnDownloadFinishedListener(OnDownloadFinishedListener listener) {\n        onDownloadFinishedListener = listener;\n    }\n\n\n    interface OnLinkNotFoundListener {\n        void onLinkNotFound();\n    }\n\n    private static OnLinkNotFoundListener onLinkNotFoundListener;\n\n    static void setOnLinkNotFoundListener(OnLinkNotFoundListener listener) {\n        onLinkNotFoundListener = listener;\n    }\n\n    @Override\n    public void onDestroy() {\n        downloadFile = null;\n        Thread.currentThread().interrupt();\n        super.onDestroy();\n    }\n\n    static void stopThread() {\n        Thread.currentThread().interrupt();\n    }\n\n    /**\n     * Should be called every second\n     *\n     * @return download speed in bytes per second\n     */\n    static long getDownloadSpeed() {\n        if (downloadFile != null) {\n            long downloaded = downloadFile.length();\n            downloadSpeed = downloaded - prevDownloaded;\n            prevDownloaded = downloaded;\n            return downloadSpeed;\n        }\n        return 0;\n    }\n\n    /**\n     * @return remaining time to download video in milliseconds\n     */\n    static long getRemaining() {\n        long remainingLength = totalSize - prevDownloaded;\n        return (1000 * (remainingLength / downloadSpeed));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/marabillas/loremar/lmvideodownloader/download_feature/DownloadManager.java	(date 1526974258000)
+++ app/src/main/java/marabillas/loremar/lmvideodownloader/download_feature/DownloadManager.java	(date 1527016992000)
@@ -49,6 +49,12 @@
 
     @Override
     protected void onHandleIntent(@Nullable Intent intent) {
+        //todo support downloading chunked videos from video streaming sites that plays video
+        // segment by segment. Download from first segment until filenotfoundexception appending
+        // every segment after another in the outputstream. Each site have different rules. For
+        // example, for vimeo, to download next segment, find substring "segment" and increment the
+        // number after it
+
         prevDownloaded = 0;
         URLConnection connection;
         try {
Index: app/src/main/java/marabillas/loremar/lmvideodownloader/download_feature/DownloadVideo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n *     LM videodownloader is a browser app for android, made to easily\n *     download videos.\n *     Copyright (C) 2018 Loremar Marabillas\n *\n *     This program is free software; you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation; either version 2 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License along\n *     with this program; if not, write to the Free Software Foundation, Inc.,\n *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\npackage marabillas.loremar.lmvideodownloader.download_feature;\n\nimport java.io.Serializable;\n\npublic class DownloadVideo implements Serializable {\n    String size, type, link, name, page;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/marabillas/loremar/lmvideodownloader/download_feature/DownloadVideo.java	(date 1526974258000)
+++ app/src/main/java/marabillas/loremar/lmvideodownloader/download_feature/DownloadVideo.java	(date 1527016992000)
@@ -24,4 +24,5 @@
 
 public class DownloadVideo implements Serializable {
     String size, type, link, name, page;
+    //todo boolean segmented; string hostSite;
 }
